name: Helm Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to EKS'
        required: false
        default: false
        type: boolean

env:
  HELM_CHART_PATH: "./microservices-chart"
  CHART_NAME: "microservices-chart"
  EKS_CLUSTER_NAME: "microservice-eks"
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  NAMESPACE: "online-boutique"

jobs:
  # --------------------------
  # JOB 1: Package Helm Chart
  # --------------------------
  helm-package:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Install Helm
        run: |
          curl -sSL https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar -xz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm version

      - name: Lint Helm Chart
        run: helm lint $HELM_CHART_PATH

      - name: Package Helm Chart
        run: helm package $HELM_CHART_PATH

      - name: Upload Helm Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: "*.tgz"
          retention-days: 7

  # --------------------------
  # JOB 2: Deploy to EKS
  # --------------------------
  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: helm-package
    if: github.event_name == 'workflow_dispatch' && inputs.deploy == true
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Download Helm Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: helm-chart

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Install Helm
        run: |
          curl -sSL https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar -xz
          sudo mv linux-amd64/helm /usr/local/bin/helm

      - name: Connect to EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
          kubectl cluster-info

      - name: Prepare Namespace
        run: |
          if ! kubectl get namespace $NAMESPACE >/dev/null 2>&1; then
            kubectl create namespace $NAMESPACE
          fi
          echo "✅ Namespace ensured: $NAMESPACE"

      - name: Safe Helm Deployment
        run: |
          echo "🚀 Starting Helm deployment..."
          set -e

          # Check if release exists
          if helm status $CHART_NAME -n $NAMESPACE >/dev/null 2>&1; then
            echo "🔄 Existing Helm release found, upgrading..."
          else
            echo "🆕 No existing release, installing fresh..."
          fi

          # Deploy with rollback on failure
          helm upgrade --install $CHART_NAME $HELM_CHART_PATH \
            --namespace $NAMESPACE \
            --create-namespace \
            --atomic \
            --wait \
            --timeout 10m

          echo "✅ Helm deployment completed successfully."

      - name: Verify Deployment Health
        run: |
          echo "🔍 Verifying deployed resources in namespace $NAMESPACE..."
          kubectl get pods -n $NAMESPACE
          kubectl get svc -n $NAMESPACE
          kubectl get ingress -n $NAMESPACE

          echo "⏳ Waiting for frontend pods to become ready..."
          kubectl wait --for=condition=ready pod -l app=frontend -n $NAMESPACE --timeout=300s || true

          echo "🔎 Checking frontend service endpoints..."
          kubectl get endpoints frontend -n $NAMESPACE || true
