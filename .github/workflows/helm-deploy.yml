name: Helm Deploy

on:
  push:
    branches:
      - feature/boutique-helm
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to EKS'
        required: false
        default: false
        type: boolean

env:
  HELM_CHART_PATH: "./microservices-chart"
  CHART_NAME: "microservices-chart"
  EKS_CLUSTER_NAME: "microservice-eks"
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

jobs:
  helm-lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        run: |
          curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar -xz
          sudo mv linux-amd64/helm /usr/local/bin/
          
      - name: Lint Helm Chart
        run: helm lint $HELM_CHART_PATH

  helm-package:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    needs: helm-lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        run: |
          curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar -xz
          sudo mv linux-amd64/helm /usr/local/bin/
          
      - name: Package Helm Chart
        run: helm package $HELM_CHART_PATH
        
      - name: Upload Helm Package
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: "*.tgz"
          retention-days: 7

  deploy-to-eks:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.deploy == true
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Install Helm
        run: |
         # curl https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar -xz
         # sudo mv linux-amd64/helm /usr/local/bin/

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
          kubectl get namespace online-boutique || kubectl create namespace online-boutique
          helm upgrade --install $CHART_NAME $HELM_CHART_PATH \
            --namespace online-boutique

      - name: Verify Deployment
        run: |
          echo "Checking deployment status..."
          kubectl get pods -n online-boutique
          kubectl get svc -n online-boutique
          kubectl get ingress -n online-boutique
          echo "Checking frontend service endpoints..."
          kubectl get endpoints frontend -n online-boutique
          echo "Checking if frontend pods are ready..."
          kubectl wait --for=condition=ready pod -l app=frontend -n online-boutique --timeout=300s
